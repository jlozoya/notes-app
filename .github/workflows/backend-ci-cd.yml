name: Backend CI/CD

on:
  push:
    branches: [master]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci-cd.yml'
  pull_request:
    branches: [master]
    paths:
      - 'backend/**'

concurrency:
  group: backend-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Run tests
        run: npm test
        continue-on-error: true

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-src
          path: backend/src/
      - name: Deploy to server
        if: github.ref == 'refs/heads/master'
        uses: appleboy/ssh-action@v1.2.0
        env:
          PORT: ${{ secrets.SERVER_PORT }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          SMTP_FROM: ${{ secrets.SMTP_FROM }}
          REPO_URL: https://github.com/jlozoya/notes-app.git
          BRANCH: master
          APP_NAME: notesapp
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          envs: PORT,MONGO_URI,JWT_SECRET,SMTP_HOST,SMTP_PORT,SMTP_USER,SMTP_PASS,SMTP_FROM,REPO_URL,BRANCH,APP_NAME
          script: |
            set -euo pipefail

            APP_ROOT="$HOME/notesapp"
            BACKEND_DIR="$APP_ROOT/backend"
            BRANCH="${BRANCH:-master}"

            # Ensure tools
            if ! command -v git >/dev/null; then
              sudo apt-get update -y && sudo apt-get install -y git
            fi
            if ! command -v node >/dev/null; then
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            if ! command -v pm2 >/dev/null; then
              sudo npm i -g pm2
            fi

            # Clone or hard-reset the repo (idempotent)
            mkdir -p "$APP_ROOT"
            if [ -d "$APP_ROOT/.git" ]; then
              echo "Resetting repo to origin/$BRANCH..."
              cd "$APP_ROOT"
              git fetch --prune origin
              git reset --hard "origin/$BRANCH"
              git clean -fd
            else
              echo "Cloning repo into $APP_ROOT ..."
              git clone --branch "$BRANCH" "$REPO_URL" "$APP_ROOT"
            fi

            # Work in backend
            mkdir -p "$BACKEND_DIR"
            cd "$BACKEND_DIR"

            # .env from secrets (0600)
            umask 0077
            cat > .env <<'EOF'
            PORT=${{ secrets.SERVER_PORT }}
            MONGO_URI=${{ secrets.MONGO_URI }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            SMTP_HOST=${{ secrets.SMTP_HOST }}
            SMTP_PORT=${{ secrets.SMTP_PORT }}
            SMTP_USER=${{ secrets.SMTP_USER }}
            SMTP_PASS=${{ secrets.SMTP_PASS }}
            SMTP_FROM=${{ secrets.SMTP_FROM }}
            EOF

            # Install, build, prune prod deps
            export NODE_ENV=production
            npm ci
            npm run build
            npm prune --omit=dev

            # Figure out entry file (dist by default; adjust if different)
            ENTRY="dist/index.js"
            [ -f "dist/index.js" ] || ENTRY="src/index.js"

            # Start / restart PM2
            if pm2 describe "$APP_NAME" >/dev/null 2>&1; then
              pm2 restart "$APP_NAME" --update-env
            else
              pm2 start "$ENTRY" --name "$APP_NAME"
            fi
            pm2 save

            echo "Deploy complete at $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
